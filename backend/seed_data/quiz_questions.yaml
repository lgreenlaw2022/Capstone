quiz_questions:
# Hash Maps Concept Quiz
  - module_title: "Hash Maps Concept Quiz"
    title: "What is a Hash Map?"
    options:
      - option_text: "A data structure that maps keys to values"
        is_correct: true
        option_type: CONCEPT

      - option_text: "A graph data structure"
        is_correct: false
        option_type: CONCEPT

      - option_text: "A sorting algorithm"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Hash Maps Concept Quiz"
    title: "What are the basic components of a hash table?"
    options:
      - option_text: "A linked list and a hash function."
        is_correct: false
        option_type: CONCEPT
      - option_text: "An array of buckets and a hash function."
        is_correct: true
        option_type: CONCEPT
      - option_text: "A binary tree and a hash function."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Hash Maps Concept Quiz"
    title: "What is a hash function?"
    options:
      - option_text: "A function that takes a key and converts it into a unique memory address."
        is_correct: false
        option_type: CONCEPT
      - option_text: "A function that maps input data to an array index."
        is_correct: true
        option_type: CONCEPT
      - option_text: "A function that encrypts data before storing it in a data structure."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Hash Maps Concept Quiz"
    title: "What is the average time complexity of searching in a Hash Map?"
    options:
      - option_text: "O(1)"
        is_correct: true
        option_type: CONCEPT

      - option_text: "O(n)"
        is_correct: false
        option_type: CONCEPT

      - option_text: "O(log n)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Hash Maps Concept Quiz"
    title: "What is the time complexity of inserting in a Hash Map?"
    options:
      - option_text: "O(1)"
        is_correct: true
        option_type: CONCEPT

      - option_text: "O(n)"
        is_correct: false
        option_type: CONCEPT

      - option_text: "O(log n)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Hash Maps Concept Quiz"
    title: "What kind of hash function minimizes collisions in a hash table?"
    options:
      - option_text: "A function that returns a constant value."
        is_correct: false
        option_type: CONCEPT

      - option_text: "A function that evenly distributes keys across all array indices."
        is_correct: true
        option_type: CONCEPT

      - option_text: "A function that increases linearly with the number of entries."
        is_correct: false
        option_type: CONCEPT

# Hash Sets Concept Quiz
  - module_title: "Hash Sets Concept Quiz"
    title: "What is the primary purpose of a hash set?"
    options:
      - option_text: "To store arrays of values."
        is_correct: false
        option_type: CONCEPT
      - option_text: "To maintain a collection of unique elements."
        is_correct: true
        option_type: CONCEPT
      - option_text: "To ensure elements are sorted."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Hash Sets Concept Quiz"
    title: "How does a hash set ensure that all elements are unique?"
    options:
      - option_text: "By sorting the elements and removing duplicates."
        is_correct: false
        option_type: CONCEPT
      - option_text: "By using a hash function to map each element to a unique index and checking for existing elements before adding a new one."
        is_correct: true
        option_type: CONCEPT
      - option_text: "By storing elements in a linked list and comparing each new element with all existing elements."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Hash Sets Concept Quiz"
    title: "Which of the following operations are typically O(1) time complexity in a hash set?"
    options:
      - option_text: "Checking if an element exists"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Sorting all elements"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Finding the minimum or maximum element"
        is_correct: false
        option_type: CONCEPT

# Hash Maps Recognition Quiz
  - module_title: "Hash Maps Recognition Quiz"
    title: "Which scenario would benefit most from the use of a hash table?"
    options:
      - option_text: "Maintaining a sorted list of student grades."
        is_correct: false
        option_type: CONCEPT
      - option_text: "Looking up a phone number given a person's name."
        is_correct: true
        option_type: CONCEPT
      - option_text: "Calculating the sum of a series of numbers."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Hash Maps Recognition Quiz"
    title: "Which scenario is most suitable for using a hash table?"
    options:
      - option_text: "Maintaining a real-time leaderboard for a gaming application where scores are continuously updated and accessed."
        is_correct: true
        option_type: CONCEPT
      - option_text: "Storing data that requires complex multi-field sorting operations frequently."
        is_correct: false
        option_type: CONCEPT
      - option_text: "Storing data where relationships between records (like in a graph) are more important than individual record access speed."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Hash Maps Recognition Quiz"
    title: "Which factor indicates a hash map is not an appropriate data structure?"
    options:
      - option_text: "The need for quick lookup of elements using a key."
        is_correct: false
        option_type: CONCEPT
      - option_text: "The data contains many duplicate values."
        is_correct: false
        option_type: CONCEPT
      - option_text: "The data needs to be iterated over in a specific order for reports."
        is_correct: true
        option_type: CONCEPT

  - module_title: "Hash Maps Recognition Quiz"
    title: "In which scenario would you prefer to use a hash set over an array or list?"
    options:
      - option_text: "When you need to maintain the order of elements."
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to perform frequent searches and ensure that all elements are unique."
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to perform range queries on a sorted list of elements."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Hash Maps Recognition Quiz"
    title: "Which scenario suggests the use of a hash set?"
    options:
      - option_text: "Maintaining a real-time leaderboard where scores need to be sorted."
        is_correct: false
        option_type: CONCEPT
      - option_text: "Tracking a collection of visited URLs to ensure no duplicates are processed."
        is_correct: true
        option_type: CONCEPT
      - option_text: "Performing range queries on a list of numbers."
        is_correct: false
        option_type: CONCEPT

# Linked Lists Concept Quiz
  - module_title: "Linked Lists Concept Quiz"
    title: "What is a linked list composed of?"
    options:
      - option_text: "Arrays and stacks"
        is_correct: false
        option_type: CONCEPT

      - option_text: "Nodes and pointers"
        is_correct: true
        option_type: CONCEPT

      - option_text: "Trees and graphs"
        is_correct: false
        option_type: CONCEPT

      - option_text: "Queues and heaps"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Concept Quiz"
    title: "What distinguishes a singly linked list from a doubly linked list?"
    options:
      - option_text: "Singly linked lists have nodes with one pointer, while doubly linked lists have nodes with two pointers"
        is_correct: true
        option_type: CONCEPT

      - option_text: "Doubly linked lists are circular, while singly linked lists are not"
        is_correct: false
        option_type: CONCEPT

      - option_text: "Doubly linked lists can have elements of different types, while singly linked lists cannot"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Concept Quiz"
    title: "In a circular linked list, what is true about the last node?"
    options:
      - option_text: "The last node points to the head node"
        is_correct: true
        option_type: CONCEPT

      - option_text: "The last node points to a null value"
        is_correct: false
        option_type: CONCEPT

      - option_text: "The last node points to itself"
        is_correct: false
        option_type: CONCEPT

      - option_text: "The last node has no pointers"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Concept Quiz"
    title: "Why are linked lists generally less efficient than arrays for accessing specific elements?"
    options:
      - option_text: "Linked lists use more memory"
        is_correct: false
        option_type: CONCEPT

      - option_text: "Nodes in a linked list must be accessed sequentially"
        is_correct: true
        option_type: CONCEPT

      - option_text: "Arrays can only be used with integers"
        is_correct: false
        option_type: CONCEPT

      - option_text: "Linked lists require more complex sorting algorithms"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Concept Quiz"
    title: "Which of the following operations on a linked list typically has O(1) time complexity?"
    options:
      - option_text: "Accessing the middle element"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Deleting the head node"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Searching for a specific value"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Sorting the list"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Concept Quiz"
    title: "What is a 'pointer' in the context of linked lists?"
    options:
      - option_text: "A variable that stores the data of a node"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A function that points to the next element"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A reference to the location of another node"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A specific value in a node"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Concept Quiz"
    title: "Which type of linked list can efficiently traverse both forwards and backwards?"
    options:
      - option_text: "Singly linked list"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Doubly linked list"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Circular linked list"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Concept Quiz"
    title: "What is the time complexity of inserting a node at the end of a singly linked list?"
    options:
      - option_text: "O(1)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(n^2)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Concept Quiz"
    title: 'How does the "temp head" strategy work in linked list algorithms?'
    options:
      - option_text: "It uses an extra pointer to keep track of the head of the linked list temporarily."
        is_correct: true
        option_type: CONCEPT
      - option_text: "It reverses the order of the nodes in the linked list."
        is_correct: false
        option_type: CONCEPT
      - option_text: "It deletes the head node of the linked list."
        is_correct: false
        option_type: CONCEPT
      - option_text: "It creates a new linked list with a different head node."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Concept Quiz"
    title: 'How does the "multiple passes" strategy work in linked list algorithms?'
    options:
      - option_text: "It involves iterating through the linked list multiple times."
        is_correct: true
        option_type: CONCEPT
      - option_text: "It uses multiple linked lists to store different parts of the data."
        is_correct: false
        option_type: CONCEPT
      - option_text: "It involves deleting nodes from the linked list in multiple steps."
        is_correct: false
        option_type: CONCEPT
      - option_text: "It swaps the order of the nodes in the linked list multiple times."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Concept Quiz"
    title: 'How can the presence of a loop in a linked list be detected using the "two pointers" strategy?'
    options:
      - option_text: "By comparing the values of the nodes in the linked list."
        is_correct: false
        option_type: CONCEPT
      - option_text: "By checking if a fast pointer reaches the end of the list."
        is_correct: false
        option_type: CONCEPT
      - option_text: "By checking if a fast pointer catches up to a slow pointer."
        is_correct: true
        option_type: CONCEPT
      - option_text: "By reversing the order of the nodes in the list."
        is_correct: false
        option_type: CONCEPT

# Linked Lists Recognition Quiz
  - module_title: "Linked Lists Recognition Quiz"
    title: 'When would the "two pointers" strategy be an appropriate technique to use in a linked list problem?'
    options:
      - option_text: "When you need to insert a node at the beginning of a linked list."
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to find the middle of a linked list in a single pass."
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to delete a node from the linked list."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Recognition Quiz"
    title: 'When would the "temporary head" strategy be an appropriate technique to use in a linked list problem?'
    options:
      - option_text: "When you need to delete the head node of a linked list."
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to insert a node at the end of the linked list."
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to detect a loop in a linked list."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Recognition Quiz"
    title: 'When would the "multiple passes" strategy be an appropriate technique to use in a linked list problem?'
    options:
      - option_text: "When you need to find the middle of the linked list."
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to traverse two linked lists at the same time."
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to insert a node at the beginning of the linked list."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Recognition Quiz"
    title: "When should you not use a linked list?"
    options:
      - option_text: "When you need to search for an element efficiently."
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to merge two linked lists."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Recognition Quiz"
    title: 'When would the "temporary head" strategy be most appropriate?'
    options:
      - option_text: "When detecting a cycle."
        is_correct: false
        option_type: CONCEPT
      - option_text: "When modifying or creating a new list."
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to find a node at a specific index."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Recognition Quiz"
    title: 'When would the "two pointers" strategy be an appropriate technique to use in a linked list problem?'
    options:
      - option_text: "When you need to insert a node at the end of the linked list."
        is_correct: false
        option_type: CONCEPT
      - option_text: "When tracking windows of nodes (sublists) in a linked list."
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to reverse the linked list."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Linked Lists Recognition Quiz"
    title: 'In which case is the "multiple passes" strategy most appropriate?'
    options:
      - option_text: "Detecting loops or cycles in a linked list."
        is_correct: false
        option_type: CONCEPT
      - option_text: "Sorting the elements of a linked list."
        is_correct: true
        option_type: CONCEPT
      - option_text: "Deleting every other node in a linked list."
        is_correct: false
        option_type: CONCEPT
      - option_text: "Reversing the order of the nodes in a linked list."
        is_correct: false
        option_type: CONCEPT

# Binary Trees Concept Quiz
  - module_title: "Binary Trees Concept Quiz"
    title: "What is a binary tree?"
    options:
      - option_text: "A tree data structure where each node has up to two children nodes."
        is_correct: true
        option_type: CONCEPT
      - option_text: "A tree data structure where each node has exactly two children nodes."
        is_correct: false
        option_type: CONCEPT
      - option_text: "A tree data structure where each node has at most one child node."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "What is the maximum number of children a node can have in a binary tree?"
    options:
      - option_text: "0"
        is_correct: false
        option_type: CONCEPT
      - option_text: "1"
        is_correct: false
        option_type: CONCEPT
      - option_text: "2"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "What is the height of a binary tree with 'n' nodes in the best case?"
    options:
      - option_text: "O(n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(n log n)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "What is a leaf node?"
    options:
      - option_text: "A node with no children"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A node with exactly one child"
        is_correct: false
        option_type: CONCEPT
      - option_text: "The first node in a binary tree"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "Which of the following is true about a complete binary tree?"
    options:
      - option_text: "All levels are completely filled except possibly the last level, which is filled from left to right."
        is_correct: true
        option_type: CONCEPT
      - option_text: "All levels are partially filled."
        is_correct: false
        option_type: CONCEPT
      - option_text: "All levels are completely filled except possibly the last level, which is filled from right to left."
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "What is the height of a binary tree?"
    options:
      - option_text: "The number of nodes in the tree"
        is_correct: false
        option_type: CONCEPT
      - option_text: "The number of levels in the tree"
        is_correct: false
        option_type: CONCEPT
      - option_text: "The number of edges from the root to the deepest leaf node"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "What is the depth of a node in a binary tree?"
    options:
      - option_text: "The number of nodes in the tree"
        is_correct: false
        option_type: CONCEPT
      - option_text: "The number of edges from the root to the node"
        is_correct: true
        option_type: CONCEPT
      - option_text: "The number of children the node has"
        is_correct: false
        option_type: CONCEPT
      - option_text: "The number of edges from the node to the deepest leaf node"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "Which of the following describes a balanced binary tree?"
    options:
      - option_text: "A tree where the left and right subtrees of every node differ in height by at most one"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A tree where all leaves are at the same depth"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A tree where all nodes have two children"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A tree where the left and right subtrees of every node differ in height by at most two"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "In pre-order traversal, the nodes are visited in which order?"
    options:
      - option_text: "Root, left, right"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Left, root, right"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Right, root, left"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "In post-order traversal, the nodes are visited in which order?"
    options:
      - option_text: "Left, right, root"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Root, left, right"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Right, root, left"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "In in-order traversal, the nodes are visited in which order?"
    options:
      - option_text: "Left, root, right"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Root, left, right"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Right, root, left"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "Which of the following is not a depth-first traversal technique?"
    options:
      - option_text: "Pre-order"
        is_correct: false
        option_type: CONCEPT
      - option_text: "In-order"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Post-order"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Level order"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Binary Trees Concept Quiz"
    title: "In a level-order traversal of a binary tree, the nodes are visited in which order?"
    options:
      - option_text: "By levels from top to bottom and left to right"
        is_correct: true
        option_type: CONCEPT
      - option_text: "By levels from bottom to top and left to right"
        is_correct: false
        option_type: CONCEPT

# Binary Search Tree Concept Quiz
  - module_title: "Binary Search Trees Concept Quiz"
    title: "What is the time complexity of searching for an element in a balanced binary search tree?"
    options:
      - option_text: "O(1)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Search Trees Concept Quiz"
    title: "What is the worst case time complexity of searching for an element in a binary search tree?"
    options:
      - option_text: "O(1)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(n log n)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Search Trees Concept Quiz"
    title: "What is the average time complexity of inserting an element into a binary search tree?"
    options:
      - option_text: "O(1)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Search Trees Concept Quiz"
    title: "How do you find the minimum value in a binary search tree?"
    options:
      - option_text: "Traverse the right subtree"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Traverse the left subtree"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Perform a level-order traversal"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Search Trees Concept Quiz"
    title: "How do you find the maximum value in a binary search tree?"
    options:
      - option_text: "Traverse the right subtree"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Traverse the left subtree"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Perform a level-order traversal"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Search Trees Concept Quiz"
    title: "What is the process of deleting a node with two children in a binary search tree?"
    options:
      - option_text: "Replace the node with the minimum value in the right subtree"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Replace the node with its left child"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Replace the node with its right child"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Replace the node with the minimum value in the left subtree"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Search Trees Concept Quiz"
    title: "How does the insertion operation work in a binary search tree?"
    options:
      - option_text: "The new node is added as a child of the root node"
        is_correct: false
        option_type: CONCEPT
      - option_text: "The new node is compared with existing nodes and inserted as a leaf node"
        is_correct: true
        option_type: CONCEPT
      - option_text: "The new node is added as a child of the leftmost node"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Search Trees Concept Quiz"
    title: "What is the average and worst-case time complexity for loading an unsorted array with 'n' elements into a binary search tree?"
    options:
      - option_text: "Average: O(n), Worst-case: O(n^2)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Average: O(n log n), Worst-case: O(n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Average: O(n log n), Worst-case: O(n^2)"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Binary Search Trees Concept Quiz"
    title: "What is a potential drawback of using a binary search tree (BST) compared to other data structures?"
    options:
      - option_text: "BSTs have slower search times than arrays"
        is_correct: false
        option_type: CONCEPT
      - option_text: "BSTs can become unbalanced, leading to inefficient operations"
        is_correct: true
        option_type: CONCEPT
      - option_text: "BSTs require more memory than linked lists"
        is_correct: false
        option_type: CONCEPT
      - option_text: "BSTs cannot store duplicate values"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Search Trees Concept Quiz"
    title: "When would you prefer to use a binary tree over a binary search tree (BST)?"
    options:
      - option_text: "When you need to perform efficient search operations"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to maintain a sorted collection of elements"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to store elements in a specific order"
        is_correct: true
        option_type: CONCEPT

# Binary Trees Recognition Quiz
  - module_title: "Binary Trees Recognition Quiz"
    title: "When should you use a binary search tree (BST) over a simple binary tree?"
    options:
      - option_text: "When you need to maintain a balanced tree structure"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to store hierarchical data"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to perform efficient search, insertion, and deletion operations"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to perform level-order traversal efficiently"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Recognition Quiz"
    title: "When should you use a binary tree instead of a binary search tree (BST)?"
    options:
      - option_text: "When you need to keep the elements in sorted order"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you require fast search, insertion, and deletion operations"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When the structure of the tree matters more than the order of the elements"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to ensure that the tree remains balanced"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Recognition Quiz"
    title: "When would you use pre-order traversal of a binary tree?"
    options:
      - option_text: "When you need to process each node before its children"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to process all leaf nodes before their parent nodes"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to get the nodes in sorted order"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to traverse nodes level by level"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Recognition Quiz"
    title: "When is in-order traversal most useful?"
    options:
      - option_text: "When you need to process each node before its children"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to process all leaf nodes before their parent nodes"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to retrieve the nodes in a BST in sorted order"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to traverse nodes level by level"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Recognition Quiz"
    title: "In which situation would post-order traversal be the best choice?"
    options:
      - option_text: "When you need to process each node before its children"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to delete or free nodes in a safe manner"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to get the nodes in sorted order"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to traverse nodes level by level"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Recognition Quiz"
    title: "For which of the following tasks is a binary tree structure particularly useful?"
    options:
      - option_text: "Implementing a sorted list of elements"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Building a heap data structure"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Managing hierarchical data such as a family tree or file system"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Ensuring constant time complexity for search operations"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Recognition Quiz"
    title: "When would you use depth-first search (DFS) over breadth-first search (BFS) in tree traversal?"
    options:
      - option_text: "When you need to find the shortest path in an unweighted tree"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to visit all nodes at the present depth level before moving on to the next level"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to explore as far down a branch as possible before backtracking"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to print nodes level by level"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Recognition Quiz"
    title: "For which scenario is level-order traversal particularly useful?"
    options:
      - option_text: "When you need to print all leaf nodes before their parent nodes"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to visit nodes in a specific depth-first order"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to find the shortest path in an unweighted tree"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to evaluate arithmetic expressions"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Recognition Quiz"
    title: "When is a binary search tree (BST) preferred over an array for searching operations?"
    options:
      - option_text: "When you need insertions and deletions while maintaining order"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When the data is static and won't change"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you require random access to elements"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Binary Trees Recognition Quiz"
    title: "When is it most suitable to use pre-order traversal in a binary tree?"
    options:
      - option_text: "When you need to evaluate postfix expressions"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to create a copy of the tree"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to retrieve elements in sorted order"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to traverse nodes level by level"
        is_correct: false
        option_type: CONCEPT

# Strings and Arrays Concept Quiz
  - module_title: "Strings and Arrays Concept Quiz"
    title: "What is a list in Python?"
    options:
      - option_text: "A fixed-length data structure that can only hold one data type"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A mutable, ordered collection of objects that can hold mixed data types"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A data structure that can only store strings"
        is_correct: false
        option_type: CONCEPT
      - option_text: "An immutable sequence of characters"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Concept Quiz"
    title: "What is the time complexity of accessing an element in an array by index?"
    options:
      - option_text: "O(1)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Concept Quiz"
    title: "What is a string in Python?"
    options:
      - option_text: "A mutable sequence of characters"
        is_correct: false
        option_type: CONCEPT
      - option_text: "An immutable sequence of characters"
        is_correct: true
        option_type: CONCEPT
      - option_text: "An array of characters"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A linked list of characters"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Concept Quiz"
    title: "What is the time complexity of appending an element to the end of a list in Python?"
    options:
      - option_text: "O(1)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Concept Quiz"
    title: "What is the time complexity of inserting an element at the beginning of a list in Python?"
    options:
      - option_text: "O(1)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Strings and Arrays Concept Quiz"
    title: "What is the time complexity of concatenating two strings of length m and n in Python?"
    options:
      - option_text: "O(m + n)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(m * n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(1)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Concept Quiz"
    title: "What is the time complexity of inserting a character in the middle of a string?"
    options:
      - option_text: "O(1)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Strings and Arrays Concept Quiz"
    title: "What is the time complexity of searching for an element in an unsorted list?"
    options:
      - option_text: "O(1)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Strings and Arrays Concept Quiz"
    title: "What is the time complexity of finding a substring in a string?"
    options:
      - option_text: "O(1)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(log n)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(n)"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Strings and Arrays Concept Quiz"
    title: "What is a subsequence of a string?"
    options:
      - option_text: "A substring that is a prefix of the string"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A substring that is a suffix of the string"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A sequence of characters that appears in the same order as the original string"
        is_correct: true
        option_type: CONCEPT

# Strings and Arrays Recognition Quiz
  - module_title: "Strings and Arrays Recognition Quiz"
    title: "Given the problem: 'Find if there exists a pair of numbers in a sorted array that sum to a target value.' Which technique would be most efficient in time and space?"
    options:
      - option_text: "Sliding window"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Two pointers"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Hash table"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Multiple Traversals"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Recognition Quiz"
    title: "Given the problem: 'Find the longest substring without repeating characters in a string.' Which technique would be most efficient in time and space?"
    options:
      - option_text: "Sliding window with hash set"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Two pointers"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Multiple Traversals"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Pre-computation"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Recognition Quiz"
    title: "Given the problem: 'Given an array, return an array where each element is the product of all numbers except the number at that index.' Which technique would be most efficient in time and space?"
    options:
      - option_text: "Sliding window"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Two pointers"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Hash Table"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Multiple Traversals"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Strings and Arrays Recognition Quiz"
    title: "Given the problem: 'Determine if a string can be rearranged to form a palindrome.' Which technique would be most efficient in time and space?"
    options:
      - option_text: "Sliding window"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Two pointers"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Hash Table"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Sorting"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Recognition Quiz"
    title: "Given the problem: 'Find the maximum sum of any contiguous subarray of size k.' Which technique would be most efficient in time and space?"
    options:
      - option_text: "Sliding window"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Two pointers"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Hash Table"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Multiple Traversals"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Recognition Quiz"
    title: "What problem characteristic would make you reconsider using a multiple traversal strategy?"
    options:
      - option_text: "When you need to calculate both prefix and suffix sums"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When data needs to be processed in real-time as it arrives"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to find the global maximum or minimum"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Recognition Quiz"
    title: "In which scenario would pre-computation likely result in the worst performance?"
    options:
      - option_text: "When the input data is static and unchanging"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When the pre-computed data is used frequently"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When there is a single query with a large input size"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Strings and Arrays Recognition Quiz"
    title: "When would you use a sliding window technique over a hash table?"
    options:
      - option_text: "When you need to track the frequency of elements"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to find the maximum sum of a subarray"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to find the longest substring without repeating characters"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Strings and Arrays Recognition Quiz"
    title: "When would you consider using multiple traversals over the two pointer technique?"
    options:
      - option_text: "When you need to find the maximum sum of a subarray"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to find the longest substring without repeating characters"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When you need to calculate both prefix and suffix sums"
        is_correct: true
        option_type: CONCEPT

# Graphs Concept Quiz
  - module_title: "Graphs Concept Quiz"
    title: "What kind of graphs are binary trees?"
    options:
      - option_text: "Directed graphs"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Undirected graphs"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Weighted graphs"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "What is the degree of a vertex in a graph?"
    options:
      - option_text: "The number of edges connected to the vertex"
        is_correct: true
        option_type: CONCEPT
      - option_text: "The maximum distance from this vertex to any other vertex"
        is_correct: false
        option_type: CONCEPT
      - option_text: "The number of paths from the vertex to other vertices"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "What is a complete graph?"
    options:
      - option_text: "A graph where every vertex is connected to every other vertex"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A graph where every vertex is connected to at least one other vertex"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A graph where every vertex has the same degree"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "What is a directed graph"
    options:
      - option_text: "A graph where edges have a direction or orientation"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A graph where edges have weights"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A graph where edges have a color"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "What is the difference between a graph and a tree?"
    options:
      - option_text: "A tree is a type of graph with no cycles"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A tree is a type of graph with no vertices"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A tree is a type of graph with no edges"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Trees can have multiple paths between nodes but graphs cannot"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "What is a connected graph?"
    options:
      - option_text: "A graph where every vertex is connected to every other vertex"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A graph where there is a path between every pair of vertices"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A graph where every vertex has the same degree"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "What is an adjacency list?"
    options:
      - option_text: "A 2D matrix where each cell indicates whether two vertices are connected"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A collection of tuples containing pairs of vertices that form edges"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A data structure that maps each vertex to a collection of its neighboring vertices"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A hash table that stores the shortest path between any two vertices"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "Which graph representation is most space-efficient for a sparse graph (with few edges)?"
    options:
      - option_text: "Adjacency matrix"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Adjacency list"
        is_correct: true
        option_type: CONCEPT
      - option_text: "All representations use the same amount of space"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "Which graph representation allows for the fastest edge lookup operations?"
    options:
      - option_text: "Adjacency matrix"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Adjacency list"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Edge list"
        is_correct: false
        option_type: CONCEPT
      - option_text: "All representations have the same lookup speed"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "What is the space complexity of an adjacency matrix for a graph with V vertices?"
    options:
      - option_text: "O(V)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(V log V)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(V^2)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(V^3)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "What is the time complexity of checking if two vertices are connected in an adjacency matrix?"
    options:
      - option_text: "O(1)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(log V)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(V)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(V^2)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Concept Quiz"
    title: "What is the time complexity of checking if two vertices are connected in an adjacency list?"
    options:
      - option_text: "O(1)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(log V)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(V)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(V^2)"
        is_correct: false
        option_type: CONCEPT

# Graphs Traversal Concept Quiz
  - module_title: "Graph Traversal Quiz"
    title: "What is Depth-First Search (DFS) in the context of graph traversal?"
    options:
      - option_text: "A traversal technique that visits nodes level by level"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A traversal technique that explores as far down a branch as possible before backtracking"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A traversal technique that visits nodes in a specific order"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "What is Breadth-First Search (BFS) in the context of graph traversal?"
    options:
      - option_text: "A traversal technique that visits nodes level by level"
        is_correct: true
        option_type: CONCEPT
      - option_text: "A traversal technique that explores as far down a branch as possible before backtracking"
        is_correct: false
        option_type: CONCEPT
      - option_text: "A traversal technique that visits nodes in a specific order"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "What data structure is typically used to implement Breadth-First Search?"
    options:
      - option_text: "Stack"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Queue"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Heap"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "What data structure is typically used to implement Depth-First Search?"
    options:
      - option_text: "Stack"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Queue"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Heap"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "What is the time complexity of DFS on a graph represented as an adjacency list?"
    options:
      - option_text: "O(V)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(E)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(V + E)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(V * E)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "What is the time complexity of BFS on a graph represented as an adjacency list?"
    options:
      - option_text: "O(V + E)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(V)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(E)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(V * E)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "What is the time complexity of DFS on a graph represented as an adjacency matrix?"
    options:
      - option_text: "O(V)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(E)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(V^2)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(V * E)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "When traversing a graph, what is the purpose of marking nodes as visited?"
    options:
      - option_text: "To prevent revisiting nodes and avoid infinite loops"
        is_correct: true
        option_type: CONCEPT
      - option_text: "To ensure that all nodes are visited exactly once"
        is_correct: false
        option_type: CONCEPT
      - option_text: "To track the order in which nodes are visited"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "What traversal technique is commonly used to find the shortest path in an unweighted graph?"
    options:
      - option_text: "Depth-First Search (DFS)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Breadth-First Search (BFS)"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "What traversal technique is commonly used to find cycles in a graph?"
    options:
      - option_text: "Depth-First Search (DFS)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Breadth-First Search (BFS)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "In a topological sort of a directed acyclic graph:"
    options:
      - option_text: "For every directed edge (u, v), vertex v comes before vertex u in the ordering"
        is_correct: false
        option_type: CONCEPT
      - option_text: "For every directed edge (u, v), vertex u comes before vertex v in the ordering"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Vertices are ordered based on their degree"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "What is the time complexity of a topological sort on a graph with V vertices and E edges using an adjacency list?"
    options:
      - option_text: "O(V)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(E)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "O(V + E)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "O(V * E)"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "Topological sort can only be applied to which type of graph?"
    options:
      - option_text: "Directed acyclic graphs (DAGs)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Directed cyclic graphs"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Undirected graphs"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graph Traversal Quiz"
    title: "What graph traversal is topological sort based on?"
    options:
      - option_text: "Depth-First Search (DFS)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Breadth-First Search (BFS)"
        is_correct: false
        option_type: CONCEPT

# Graphs Recognition Quiz
  - module_title: "Graphs Recognition Quiz"
    title: "When would you choose an Adjacency Matrix over an Adjacency List?"
    options:
      - option_text: "When working with a sparse graph with few connections"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When memory efficiency is a primary concern"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When edge lookup speed is critical and the graph is dense"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Graphs Recognition Quiz"
    title: "Which graph traversal strategy is best for finding the shortest path in an unweighted graph?"
    options:
      - option_text: "Depth-First Search (DFS)"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Breadth-First Search (BFS)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Topological Sort"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Recognition Quiz"
    title: "When would an Edge List be the most appropriate graph representation?"
    options:
      - option_text: "When you need constant-time edge lookup"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When working with algorithms that primarily process edges and order matters"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When you need to frequently iterate through neighbors"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Recognition Quiz"
    title: "When is Topological Sort not applicable?"
    options:
      - option_text: "When working with course prerequisites"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When resolving dependencies"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When the graph contains cycles"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Graphs Recognition Quiz"
    title: "When would you use DFS over BFS?"
    options:
      - option_text: "When finding the shortest path in an unweighted graph"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When exploring all possible paths in a maze-like problem"
        is_correct: true
        option_type: CONCEPT
      - option_text: "When memory is extremely constrained but the graph is wide"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Recognition Quiz"
    title: "Which graph representation is best suited for graphs where vertices can be dynamically added or removed?"
    options:
      - option_text: "Adjacency Matrix"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Adjacency List"
        is_correct: true
        option_type: CONCEPT
      - option_text: "Edge List"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Recognition Quiz"
    title: "In which scenario would BFS be a poor choice?"
    options:
      - option_text: "When finding the shortest path in an unweighted graph"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When exploring nearest neighbors"
        is_correct: false
        option_type: CONCEPT
      - option_text: "When memory is extremely constrained and the graph is wide"
        is_correct: true
        option_type: CONCEPT

  - module_title: "Graphs Recognition Quiz"
    title: "What key information should you determine about a graph before selecting a representation?"
    options:
      - option_text: "Whether the graph is sparse or dense"
        is_correct: true
        option_type: CONCEPT
      - option_text: "The programming language you'll implement it in"
        is_correct: false
        option_type: CONCEPT
      - option_text: "How many algorithms you'll need to run on it"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Recognition Quiz"
    title: "What characteristic makes a graph suitable for Topological Sort?"
    options:
      - option_text: "It must be a Directed Acyclic Graph (DAG)"
        is_correct: true
        option_type: CONCEPT
      - option_text: "It must be undirected and fully connected"
        is_correct: false
        option_type: CONCEPT
      - option_text: "It must have weighted edges"
        is_correct: false
        option_type: CONCEPT

  - module_title: "Graphs Recognition Quiz"
    title: "When solving a dependency resolution problem, which strategy would you most likely use?"
    options:
      - option_text: "Breadth-First Search"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Depth-First Search with cycle detection"
        is_correct: false
        option_type: CONCEPT
      - option_text: "Topological Sort"
        is_correct: true
        option_type: CONCEPT
