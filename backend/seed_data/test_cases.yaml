test_cases:
# Hash maps
  - module_type: "CHALLENGE"
    module_title: "Contains Duplicate"
    target_runtime: O_N
    test_cases:
      - input: "[0,1,2,3,0]"
        output: "true"
      - input: "[-1,-1,-2,-3,-4,-1]"
        output: "true"
      - input: "[1,2,3,4,5,6,7,8,9,10]"
        output: "false"

  - module_type: "BONUS_CHALLENGE"
    module_title: "Longest Substring Without Repeating Characters"
    target_runtime: O_N
    test_cases:
      - input: "aab cd aab"
        output: "4"
      - input: "!@#$%^&*()!@#"
        output: "10"
      - input: "a"
        output: "1"

# Linked Lists
  - module_type: "CHALLENGE"
    module_title: "Remove Nth Node From End of List"
    target_runtime: O_N
    test_cases:
      - input: "[1,2,3,4,5] n=5"
        output: "[2,3,4,5]"
      - input: "[1,2,3] n=1"
        output: "[1,2]"
      - input: "[1] n=1"
        output: "[]"

  - module_type: "BONUS_CHALLENGE"
    module_title: "Reverse Linked List"
    target_runtime: O_N
    test_cases:
      - input: "[2,2,2]"
        output: "[2,2,2]"
      - input: "[1,5,3,2]"
        output: "[2,3,5,1]"
      - input: "[]"
        output: "[]"

# Binary Trees
  - module_type: "CHALLENGE"
    module_title: "Invert Binary Tree"
    target_runtime: O_N
    test_cases:
      - input: "[4,2,7,1,3,6,9]"
        output: "[4,7,2,9,6,3,1]"
      - input: "[1,2,None,3]"
        output: "1,None,2,None,None,None,3"
      - input: "[1,None,2,None,None,None,3]"
        output: "[1,2,None,3]"

  - module_type: "BONUS_CHALLENGE"
    module_title: "Convert Sorted Array to Binary Search Tree"
    target_runtime: O_N
    # TODO: how to handle cases where the output is not unique?
    test_cases:
      - input: "[1,2,3,4,5]"
        output: "[3,2,5,1,None,4]"
      - input: "[1,2,3,4,5,6,7,8,9]"
        output: "[6,3,8,2,5,7,9,1,None,4,None,None,None,None,None]"
      - input: "[]"
        output: "[]"