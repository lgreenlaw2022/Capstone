"""Add UserHint table with relationships

Revision ID: 9f6a80078e7f
Revises: d65d4263d860
Create Date: 2024-12-20 10:29:38.587188

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9f6a80078e7f'
down_revision = 'd65d4263d860'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_hints',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('hint_id', sa.Integer(), nullable=False),
    sa.Column('unlocked', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['hint_id'], ['hints.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'hint_id')
    )
    with op.batch_alter_table('user_goals', schema=None) as batch_op:
        batch_op.alter_column('date_assigned',
               existing_type=sa.DATETIME(),
               type_=sa.Date(),
               existing_nullable=False)
        batch_op.alter_column('date_completed',
               existing_type=sa.DATETIME(),
               type_=sa.Date(),
               existing_nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_goals', schema=None) as batch_op:
        batch_op.alter_column('date_completed',
               existing_type=sa.Date(),
               type_=sa.DATETIME(),
               existing_nullable=True)
        batch_op.alter_column('date_assigned',
               existing_type=sa.Date(),
               type_=sa.DATETIME(),
               existing_nullable=False)

    op.drop_table('user_hints')
    # ### end Alembic commands ###
