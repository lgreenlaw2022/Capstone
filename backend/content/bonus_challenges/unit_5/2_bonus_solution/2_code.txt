class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
		if not grid or not grid[0]:
			return 0
		
		rows, cols = len(grid), len(grid[0])
		max_area = 0
		
		def dfs(r, c):
			# Check if current position is out of bounds or not land
			if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0:
				return 0
			
			# Mark as visited
			grid[r][c] = 0
			
			# Calculate area by exploring all four directions
			area = 1  # Current cell contributes 1 to the area
			area += dfs(r + 1, c)  # down
			area += dfs(r - 1, c)  # up
			area += dfs(r, c + 1)  # right
			area += dfs(r, c - 1)  # left
			
			return area
		
		for r in range(rows):
			for c in range(cols):
				if grid[r][c] == 1:
					current_area = dfs(r, c)
					max_area = max(max_area, current_area)
		
		return max_area